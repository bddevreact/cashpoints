from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import os
from datetime import datetime

# Bot token (ржЖржкржирж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЯрзЛржХрзЗржи)
TOKEN = "8214925584:AAGzxmpSxFTGmvU-L778DNxUJ35QUR5dDZU"

# /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ржЫржмрж┐рж░ URL
    image_url = "https://i.postimg.cc/44DtvWyZ/43b0363d-525b-425c-bc02-b66f6d214445-1.jpg"

    # ржмрж╛ржВрж▓рж╛ ржмрж┐ржмрж░ржг
    caption = (
        "ЁЯПЖ <b>рж░рж┐ржУржпрж╝рж╛рж░рзНржб ржЕрж░рзНржЬржи ржПржЦржи ржЖрж░ржУ рж╕рж╣ржЬ!</b>\n\n"
        "тЬЕ ржХрзЛржирзЛ ржЗржиржнрзЗрж╕рзНржЯржорзЗржирзНржЯ ржЫрж╛ржбрж╝рж╛ржЗ ржкрзНрж░рждрж┐ржжрж┐ржи ржЬрж┐рждрзЗ ржирж┐ржи рж░рж┐ржУржпрж╝рж╛рж░рзНржбред\n"
        "ЁЯСе рж╢рзБржзрзБ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ ржорзЗржорзНржмрж╛рж░ ржЕрзНржпрж╛ржб ржХрж░рзБржи,\n"
        "ЁЯОп рж╕рж╣ржЬ ржХрж┐ржЫрзБ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи ржХрж░рзБржи ржЖрж░\n"
        "ЁЯЪА рж▓рзЗржнрзЗрж▓ ржЖржк ржХрж░рзБржиред\n\n"
        "ЁЯУИ ржкрзНрж░рждрж┐ржЯрж┐ рж▓рзЗржнрзЗрж▓рзЗржЗ ржерж╛ржХржЫрзЗ ржмрж╛ржбрж╝рждрж┐ ржмрзЛржирж╛рж╕ ржПржмржВ ржирждрзБржи рж╕рзБржмрж┐ржзрж╛ред\n"
        "ЁЯТО ржпржд ржмрзЗрж╢рж┐ рж╕ржХрзНрж░рж┐ржпрж╝ рж╣ржмрзЗржи, рждржд ржмрзЗрж╢рж┐ рж░рж┐ржУржпрж╝рж╛рж░рзНржб ржЖржкржирж╛рж░ рж╣рж╛рждрзЗред\n\n"
        "ЁЯСЙ ржПржЦржиржЗ рж╢рзБрж░рзБ ржХрж░рзБржи ржПржмржВ ржЖржкржирж╛рж░ рж░рж┐ржУржпрж╝рж╛рж░рзНржб ржХрзНрж▓рзЗржЗржо ржХрж░рзБржи!"
    )

    # "Open and Earn" ржмрж╛ржЯржи - ржорж┐ржирж┐ ржЕрзНржпрж╛ржк рж▓рж┐ржВржХ
    keyboard = [
        [InlineKeyboardButton("Open and Earn ЁЯТ░", url="https://super-donut-5e4873.netlify.app/")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ржЫржмрж┐, ржХрзНржпрж╛ржкрж╢ржи ржПржмржВ ржмрж╛ржЯржи ржкрж╛ржарж╛ржирзЛ
    await update.message.reply_photo(
        photo=image_url,
        caption=caption,
        reply_markup=reply_markup,
        parse_mode='HTML'  # HTML ржорзЛржбрзЗ ржмрзЛрж▓рзНржб, рж▓рж╛ржЗржи ржмрзНрж░рзЗржХ ржЗрждрзНржпрж╛ржжрж┐ ржХрж╛ржЬ ржХрж░ржмрзЗ
    )

# New member join handler
async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat = update.message.chat
        new_members = update.message.new_chat_members
        
        for member in new_members:
            # Skip if it's the bot itself
            if member.is_bot:
                continue
                
            user_id = member.id
            username = member.username or member.first_name
            first_name = member.first_name
            last_name = member.last_name or ""
            join_date = datetime.now()
            
            print(f"ЁЯСд New member joined: {username} (ID: {user_id}) in chat: {chat.title}")
            print(f"ЁЯУЕ Join time: {join_date}")
            print(f"ЁЯСд User details: {first_name} {last_name}")
            print("---")
            
            # Send welcome message to the group
            welcome_message = (
                f"ЁЯОЙ <b>рж╕рзНржмрж╛ржЧрждржо {first_name}!</b>\n\n"
                f"ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ Cash Points ржХржорж┐ржЙржирж┐ржЯрж┐рждрзЗ ржпрзЛржЧ ржжрж┐ржпрж╝рзЗржЫрзЗржиред\n"
                f"ЁЯТ░ рж░рж┐ржУржпрж╝рж╛рж░рзНржб ржЕрж░рзНржЬржи рж╢рзБрж░рзБ ржХрж░рзБржи ржПржЦржиржЗ!\n\n"
                f"ЁЯСЙ <a href='https://super-donut-5e4873.netlify.app/'>Mini App ржЦрзБрж▓рзБржи</a>"
            )
            
            await update.message.reply_text(
                welcome_message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
                
    except Exception as e:
        print(f"тЭМ Error handling new member: {e}")

# Member left handler
async def handle_member_left(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat = update.message.chat
        left_member = update.message.left_chat_member
        
        if left_member.is_bot:
            return
            
        user_id = left_member.id
        username = left_member.username or left_member.first_name
        leave_date = datetime.now()
        
        print(f"ЁЯСЛ User left: {username} (ID: {user_id}) from chat: {chat.title}")
        print(f"ЁЯУЕ Leave time: {leave_date}")
        print("---")
        
    except Exception as e:
        print(f"тЭМ Error handling member left: {e}")

# Referral tracking from messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message
        user_id = message.from_user.id
        chat_id = message.chat.id
        text = message.text or ""
        
        # Check for referral links in messages
        if "super-donut-5e4873.netlify.app" in text and "?ref=" in text:
            # Extract referral code from URL
            import re
            ref_match = re.search(r'[?&]ref=([^&]+)', text)
            if ref_match:
                referral_code = ref_match.group(1)
                
                print(f"ЁЯФЧ Referral link clicked by user {user_id} with code {referral_code}")
                print(f"ЁЯТм Message: {text[:100]}...")
                print("---")
                
    except Exception as e:
        print(f"тЭМ Error handling message: {e}")

# Help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ЁЯдЦ <b>Cash Points Bot Commands:</b>\n\n"
        "ЁЯУЛ <b>Available Commands:</b>\n"
        "/start - Start the bot and get main menu\n"
        "/help - Show this help message\n\n"
        "ЁЯФН <b>Bot Features:</b>\n"
        "тЬЕ Automatic join/leave tracking\n"
        "тЬЕ Referral link monitoring\n"
        "тЬЕ Welcome messages for new members\n"
        "тЬЕ Mini App integration\n\n"
        "ЁЯУК <b>Tracking Status:</b>\n"
        "ЁЯСе Members joined: Tracked\n"
        "ЁЯСЛ Members left: Tracked\n"
        "ЁЯФЧ Referral links: Monitored\n\n"
        "ЁЯТб <b>Tip:</b> Add the bot to your group as admin for full functionality!"
    )
    
    await update.message.reply_text(help_text, parse_mode='HTML')

# Status command
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status_text = (
        "ЁЯУК <b>Bot Status:</b>\n\n"
        "ЁЯЯв <b>Bot Status:</b> Running\n"
        "ЁЯЯв <b>Join Tracking:</b> Active\n"
        "ЁЯЯв <b>Leave Tracking:</b> Active\n"
        "ЁЯЯв <b>Referral Monitoring:</b> Active\n\n"
        "ЁЯУЕ <b>Last Update:</b> " + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "\n\n"
        "тЬЕ <b>All systems operational!</b>"
    )
    
    await update.message.reply_text(status_text, parse_mode='HTML')

def main():
    # ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рждрзИрж░рж┐
    app = Application.builder().token(TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржи
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status_command))
    
    # Member join/leave handlers
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_member))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, handle_member_left))
    
    # Message handler for referral tracking
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("тЬЕ ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ... ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ /start рж▓рж┐ржЦрзБржиред")
    print("ЁЯФН Join/Leave tracking enabled")
    print("ЁЯУК Referral link tracking enabled")
    print("ЁЯТм Welcome messages enabled")
    print("ЁЯУЛ Commands: /start, /help, /status")
    print("---")
    # ржкрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рзБржи
    app.run_polling()

if __name__ == "__main__":
    main()
